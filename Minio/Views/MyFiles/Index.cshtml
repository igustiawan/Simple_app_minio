@using Minio.Services
@{
    ViewData["Title"] = "MyFiles";
    ViewData["Menu"] = "MyFiles";
}

<!-- Include Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<div class="wrapper">
    <div class="content-wrapper">
        <div class="container-fluid p-4">
            <h2>File Manager</h2>
            <!-- Sorting & View Options -->


            <div class="d-flex justify-content-between mb-3">
                <!-- Upload Button -->
                <button id="uploadBtn" class="btn btn-primary" data-bs-toggle="modal" data-bs-backdrop="static" data-bs-target="#uploadModal">Upload</button>

                <div class="d-flex">
                    <!-- Sorting Dropdown -->
                    <div class="dropdown me-2">
                        <button class="btn btn-light dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            Sort
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="sortDropdown">
                            <li><a class="dropdown-item sort-option" data-sort="name">Name</a></li>
                            <li><a class="dropdown-item sort-option" data-sort="date">Modified Date</a></li>
                            <li><a class="dropdown-item sort-option" data-sort="size">File Size</a></li>
                        </ul>
                    </div>
                    <!-- View Options Dropdown -->
                    <div class="dropdown">
                        <button class="btn btn-light dropdown-toggle" type="button" id="viewDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            View
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="viewDropdown">
                            <li><a class="dropdown-item view-option" data-view="list">List</a></li>
                            <li><a class="dropdown-item view-option" data-view="tiles">Tiles</a></li>
                        </ul>
                    </div>
                </div>
            </div>


            <!-- Modal Upload -->
            <div id="uploadModal" class="modal fade" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content p-4 shadow-lg rounded-3">
                        <!-- Modal Header -->
                        <div class="d-flex justify-content-between align-items-center border-bottom pb-2">
                            <h4 class="modal-title fw-bold">Upload File</h4>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <!-- Drag and Drop Zone -->
                        <div id="dropZone" class="drop-zone mt-3 p-4 text-center border border-dashed rounded bg-light">
                            <p class="mb-2 text-muted">
                                Drag and drop file here or
                                <a href="#" id="browseFiles" class="text-primary fw-semibold">browse</a>
                            </p>
                            <input type="file" id="fileInput" multiple hidden>
                        </div>

                        <!-- Uploaded Files List -->
                        <h5 class="mt-4 fw-semibold">Uploaded Files</h5>
                        <ul id="fileList" class="list-group list-group-flush mt-2">
                            <!-- File items akan ditambahkan secara dinamis -->
                        </ul>

                        <!-- Modal Footer -->
                @*         <div class="d-flex justify-content-end mt-3 border-top pt-3">
                            <button class="btn btn-link text-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button class="btn btn-primary ms-2">Add Files</button>
                        </div> *@
                    </div>
                </div>
            </div>



            <div id="toolbar" class="toolbar" style="display: none;">
                <button id="deleteBtn">
                    <i class="fas fa-trash-alt"></i>
                    Delete
                </button>
                <button id="favoriteBtn">
                    <i class="fas fa-star"></i>
                    Favorite
                </button>
                <button id="downloadBtn">
                    <i class="fas fa-download"></i>
                    Download
                </button>
                <button id="moveToBtn">
                    <i class="fas fa-folder"></i>
                    Move to
                </button>
                <button id="copyToBtn">
                    <i class="fas fa-copy"></i>
                    Copy to
                </button>
                <select id="sortSelect">
                    <!-- Pilihan sort -->
                </select>
                <select id="viewSelect">
                    <!-- Pilihan view -->
                </select>
                <span id="selectedCount">0 selected</span>
            </div>

            </br>

            <!-- File Container -->
            <div id="fileContainer"></div>
        </div>
    </div>
</div>
<!-- Custom Styles -->
<style>
    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.2) !important;
    }

    .modal-content {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.2);
        border: none;
    }

    .modal-body {
        background: #f9fafb;
    }

    .drop-zone {
        border: 2px dashed #6c757d;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        background: #f1f3f5;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
    }

        .drop-zone:hover {
            background: #e9ecef;
            border-color: #007bff;
        }

        .drop-zone p {
            margin: 0;
            color: #495057;
            font-size: 0.95rem;
        }

        .drop-zone a {
            color: #007bff;
            font-weight: 600;
            text-decoration: none;
        }

    .file-item {
        display: flex;
        align-items: center;
        background: #f8f9fa;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 8px;
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
    }

    .file-icon {
        width: 40px;
        height: 40px;
        background: #ddd;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        margin-right: 10px;
        color: #6c757d;
    }

    .file-name {
        flex-grow: 1;
        font-weight: 500;
        color: #343a40;
    }

    .file-size {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .progress-bar {
        height: 5px;
        background: #007bff;
        border-radius: 4px;
    }

    .delete-btn {
        background: none;
        border: none;
        font-size: 18px;
        color: #dc3545;
        cursor: pointer;
        transition: color 0.2s ease-in-out;
    }

        .delete-btn:hover {
            color: #a71d2a;
        }

</style>
<style>
    /* Styling for actions button */
    .btn-link {
        color: #007bff;
        text-decoration: none;
    }

    /* Styling for dropdown menu */
    .dropdown-menu {
        min-width: 10rem;
        z-index: 1000; /* Ensure dropdown appears above other elements */
    }

    /* Hover effect for dropdown items */
    .dropdown-item:hover {
        background-color: #f8f9fa;
        color: #007bff;
    }

    /* Base styling for tiles */
    .tiles-view {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 36px;
        overflow: hidden; /* Hilangkan scroll */
    }

    .tile-item {
        position: relative;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 36px;
        text-align: center;
        background-color: #f9f9f9;
        transition: transform 0.2s ease-in-out;
        overflow: hidden; /* Hilangkan scroll */
        height: 100%; /* Pastikan tinggi tetap sesuai */
    }

    .tile-icon {
        font-size: 48px;
        margin-bottom: 8px;
        color: #007bff;
        transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;
    }

    .tile-name {
        font-size: 14px;
        font-weight: bold;
        margin-bottom: 4px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .tile-info {
        font-size: 12px;
        color: #666;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Hover effect */
    .tile-item:hover {
        transform: scale(1);
    }

        .tile-item:hover .tile-icon {
            transform: scale(1.2); /* Perbesar ikon saat hover */
            color: #ff6f61; /* Ubah warna ikon saat hover */
        }


    input[type="checkbox"] {
        position: absolute;
        opacity: 0;
    }

    label {
        position: relative;
        padding-left: 25px; /* Adjust based on checkbox size */
        cursor: pointer;
    }

        label::before {
            content: '';
            position: absolute;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 25px;
            height: 25px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

    input[type="checkbox"]:checked + label::before {
        background-color: #007bff;
        border-color: #007bff;
    }

    input[type="checkbox"]:checked + label::after {
        content: '';
        position: absolute;
        left: 6px;
        top: 50%;
        transform: translateY(-50%);
        width: 5px;
        height: 10px;
        border-style: solid;
        border-color: white;
        border-image: initial;
        border-width: 0 2px 2px 0;
        transform-origin: center center;
        rotate: 45deg;
    }

    .toolbar {
          display: flex;
          background-color: #ffffff;
          border-radius: 5px;
          box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
          padding: 5px 10px;
        }

        .toolbar button,
        .toolbar select,
        .toolbar span {
          display: flex;
          align-items: center;
          border: none;
          background: none;
          color: #666666;
          padding: 5px 10px;
          cursor: pointer;
          transition: color 0.3s ease;
        }

        .toolbar button:hover {
          color: #333333;
        }

        .toolbar button i {
          margin-right: 5px;
        }

        .toolbar select {
          appearance: none;
          -webkit-appearance: none;
          background: url('dropdown-icon.svg') right center / contain no-repeat;
          padding: 5px 20px 5px 10px;
        }


</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const dropZone = document.getElementById("dropZone");
        const fileInput = document.getElementById("fileInput");
        const fileList = document.getElementById("fileList");
        const browseFiles = document.getElementById("browseFiles");

        // ✅ SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/uploadHub")
            .withAutomaticReconnect()
            .build();

        connection.start().catch(err => console.error(err));

        // Prevent default drag behaviors
        ["dragenter", "dragover", "dragleave", "drop"].forEach(event => {
            dropZone.addEventListener(event, e => e.preventDefault());
        });

        dropZone.addEventListener("dragover", () => dropZone.classList.add("border-primary"));
        dropZone.addEventListener("dragleave", () => dropZone.classList.remove("border-primary"));

        dropZone.addEventListener("drop", (event) => {
            dropZone.classList.remove("border-primary");
            handleFiles(event.dataTransfer.files);
        });

        browseFiles.addEventListener("click", (e) => {
            e.preventDefault();
            fileInput.click();
        });

        fileInput.addEventListener("change", (event) => {
            handleFiles(event.target.files);
        });

        function handleFiles(files) {
            Array.from(files).forEach(async (file) => {
                const listItem = document.createElement("li");
                listItem.classList.add("file-item");
                listItem.innerHTML = `
                    <div class="file-icon">📄</div>
                    <div class="file-info flex-grow-1">
                        <div class="file-name fw-bold">${file.name}</div>
                        <div class="file-size text-muted">${(file.size / 1024 / 1024).toFixed(2)} MB</div>
                        <div class="progress mt-2">
                            <div class="progress-bar bg-primary" style="width: 0%;"></div>
                        </div>
                    </div>
                `;

                const progressBar = listItem.querySelector(".progress-bar");
                fileList.appendChild(listItem);

                let uploadId = null;

                try {
                    const startResponse = await fetch("/Upload/StartUpload");
                    if (!startResponse.ok) throw new Error("Gagal mendapatkan uploadId");
                    const startResult = await startResponse.json();
                    uploadId = startResult.uploadId;

                    const formData = new FormData();
                    formData.append("file", file);

                    const xhr = new XMLHttpRequest();
                    xhr.open("POST", `/Upload/Upload?uploadId=${uploadId}`, true);

                    xhr.upload.onprogress = function (event) {
                        if (event.lengthComputable) {
                            let progress = Math.round((event.loaded / event.total) * 100);
                            progressBar.style.width = `${progress}%`;
                        }
                    };

                    xhr.onload = function () {
                        if (xhr.status === 200) {
                            progressBar.classList.add("bg-success");
                        } else {
                            progressBar.classList.add("bg-danger");
                        }
                    };

                    xhr.onerror = function () {
                        progressBar.classList.add("bg-danger");
                    };

                    xhr.send(formData);
                } catch (error) {
                    progressBar.classList.add("bg-danger");
                    console.error(`Error: ${error.message}`);
                }
            });
        }

        connection.on("ReceiveUploadProgress", (uploadId, progress) => {
            console.log(`Progress: ${progress}%`);
            const progressBars = document.querySelectorAll(".progress-bar");
            progressBars.forEach(progressBar => {
                if (progressBar.style.width !== "100%") {
                    progressBar.style.width = `${progress}%`;
                }
            });
        });
    });


</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // const fileData = [
        //     { name: "OfficeMobile", date: "October 30, 2021", size: "0 items" },
        //     { name: "Office Lens", date: "October 13, 2021", size: "0 items" },
        //     { name: "Microsoft Copilot Chat Files", date: "Monday at 1:58...", size: "0 items" },
        //     { name: "Lampiran", date: "February 25, 2024", size: "0 items" },
        //     { name: "Aplikasi", date: "January 19, 2024", size: "0 items" },
        //     { name: "SyncLogExcel.xlsx", date: "Yesterday at 1:...", size: "36.2 KB" },
        //     { name: "Presentation.pptx", date: "November 7, 2023", size: "-" },
        //     { name: "Doc1-1.docx", date: "April 21, 2024", size: "12.8 KB" },
        //     { name: "Buku1.xlsx", date: "October 4, 2023", size: "7.81 KB" },
        //     { name: "Buku.xlsx", date: "February 17, 2023", size: "9.02 KB" },
        //     { name: "Buku 2.xlsx", date: "January 23, 2024", size: "11.2 KB" },
        // ];

        let fileData = [];

        $.ajax({
            url: "/MyFiles/GetFileList", // Ganti ControllerName dengan nama controller yang sesuai
            type: "GET",
            dataType: "json",
            success: function (data) {
                fileData = data; // Simpan data di variabel global
                renderListView();
                console.log("File data loaded:", fileData);
            },
            error: function (xhr) {
                console.error("Failed to fetch file list:", xhr.responseText);
            }
        });
      

        function renderListView() {
            let container = document.getElementById("fileContainer");
            container.innerHTML = `
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>
                                <input type="text" id="filterName" class="form-control" placeholder="Filter Name">
                            </th>
                            <th>
                                <input type="text" id="filterDate" class="form-control" placeholder="Filter Date">
                            </th>
                            <th>
                                <input type="text" id="filterSize" class="form-control" placeholder="Filter Size">
                            </th>
                            <th></th>
                        </tr>
                        <tr>
                            <th>
                                Name
                                <button class="btn btn-link dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-sort"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="sortTable('name', 'asc')">A → Z</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="sortTable('name', 'desc')">Z → A</a></li>
                                </ul>
                            </th>
                            <th>
                                Modified Date
                                <button class="btn btn-link dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-sort"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="sortTable('date', 'asc')">Oldest → Newest</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="sortTable('date', 'desc')">Newest → Oldest</a></li>
                                </ul>
                            </th>
                            <th>
                                Size
                                <button class="btn btn-link dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-sort"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="sortTable('size', 'asc')">Small → Large</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="sortTable('size', 'desc')">Large → Small</a></li>
                                </ul>
                            </th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="fileTableBody">
                        ${fileData.map(file => renderRow(file)).join('')}
                    </tbody>
                </table>
            `;

            // Tambahkan event listener untuk filter
            document.getElementById("filterName").addEventListener("input", filterTable);
            document.getElementById("filterDate").addEventListener("input", filterTable);
            document.getElementById("filterSize").addEventListener("input", filterTable);
        }

        function renderRow(file) {
            return `
                <tr>
                    <td>${file.fileName}</td>
                    <td>${file.lastModified}</td>
                    <td>${file.size}</td>
                    <td>
                        <button class="btn btn-link dropdown-toggle action-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item action-detail" href="#">Details</a></li>
                            <li><a class="dropdown-item action-share" href="#">Share</a></li>
                            <li><a class="dropdown-item action-copy" href="#">Copy</a></li>
                            <li><a class="dropdown-item action-move" href="#">Move</a></li>
                            <li><a class="dropdown-item action-download" href="#">Download</a></li>
                            <li><a class="dropdown-item action-rename" href="#">Rename</a></li>
                            <li><a class="dropdown-item action-delete" href="#" data-filename="${file.fileName}">Delete</a></li>
                        </ul>
                    </td>
                </tr>
            `;
        }

        document.addEventListener("click", async function (event) {
            if (event.target.classList.contains("action-delete")) {
                event.preventDefault();

                // Dapatkan baris terkait
                let row = event.target.closest("tr");
                let fileName = row.querySelector("td:first-child").innerText;

                if (!confirm(`Apakah Anda yakin ingin menghapus ${fileName}?`)) return;

                try {
                    const response = await fetch(`/Upload/DeleteFile?fileName=${encodeURIComponent(fileName)}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) {
                        throw new Error(`Gagal menghapus file: ${response.statusText}`);
                    }

                    alert(`File "${fileName}" berhasil dihapus.`);
                    row.remove(); // Hapus baris dari tabel tanpa perlu refresh seluruh halaman
                } catch (error) {
                    console.error("Error:", error);
                    alert("Terjadi kesalahan saat menghapus file.");
                }
            } else if (event.target.classList.contains("action-download")) {
                event.preventDefault();

                let button = event.target;
                let row = button.closest("tr");
                let fileName = row.querySelector("td:first-child").innerText;

                if (!fileName) return;

                button.disabled = true; // Nonaktifkan tombol saat download
                button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Downloading...';

                try {
                    const encodedFileName = encodeURIComponent(fileName);
                    const url = `/Upload/DownloadFile?fileName=${encodedFileName}`;

                    const response = await fetch(url);
                    if (!response.ok) throw new Error("Gagal mengunduh file.");

                    const blob = await response.blob();
                    const objectUrl = URL.createObjectURL(blob);

                    // Buat elemen <a> untuk memicu download
                    const a = document.createElement("a");
                    a.href = objectUrl;
                    a.download = fileName;
                    document.body.appendChild(a);
                    a.click();

                    URL.revokeObjectURL(objectUrl);
                    document.body.removeChild(a);
                } catch (error) {
                    console.error("Error:", error);
                    alert("Terjadi kesalahan saat mengunduh file.");
                } finally {
                    button.innerHTML = "Download";
                    button.disabled = false;
                }
            }
        });


        function filterTable() {
            const nameFilter = document.getElementById("filterName").value.toLowerCase();
            const dateFilter = document.getElementById("filterDate").value.toLowerCase();
            const sizeFilter = document.getElementById("filterSize").value.toLowerCase();

            const filteredData = fileData.filter(file =>
                file.name.toLowerCase().includes(nameFilter) &&
                file.date.toLowerCase().includes(dateFilter) &&
                file.size.toLowerCase().includes(sizeFilter)
            );

            document.getElementById("fileTableBody").innerHTML = filteredData.map(file => renderRow(file)).join('');
        }

        function sortTable(column, order) {
            fileData.sort((a, b) => {
                let valA = a[column].toLowerCase();
                let valB = b[column].toLowerCase();

                if (column === 'size') {
                    valA = parseFloat(a.size) || 0;
                    valB = parseFloat(b.size) || 0;
                }

                if (order === 'asc') return valA > valB ? 1 : -1;
                return valA < valB ? 1 : -1;
            });

            document.getElementById("fileTableBody").innerHTML = fileData.map(file => renderRow(file)).join('');
        }

        function renderTilesView() {
            let container = document.getElementById("fileContainer");
            container.innerHTML = `
                <div class="tiles-view">
                    ${fileData.map(file => `
                        <div class="tile-item">
                                ${getFileIcon(file.fileName)}
                                <div class="tile-name">${file.fileName}</div>
                                <div class="tile-info">${file.lastModified} - ${file.size}</div>
                                <input type="checkbox" id="${sanitizeId(file.fileName)}" class="file-checkbox" name="${file.name}">
                                <label for="${sanitizeId(file.fileName)}"></label>
                        </div>
                    `).join('')}
                </div>
                `;

            document.querySelectorAll('.file-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', handleCheckboxChange);
            });
        }

   

        document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.classList.add('file-checkbox'); // Tambahkan class
        });

        document.getElementById('deleteBtn').addEventListener('click', () => {
            const selectedFiles = [];
            document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
                const fileId = checkbox.id;
                selectedFiles.push(fileId);
                // Lakukan tindakan delete pada fileId
            });
            // Lakukan tindakan delete pada array selectedFiles
        });

        function sanitizeId(id) {
            return id.replace(/[^a-zA-Z0-9]/g, '_');
        }

        const toolbar = document.getElementById('toolbar');
        const checkboxes = document.querySelectorAll('.file-checkbox');
        const fileContainer = document.getElementById('fileContainer');
        const selectedCountElement = document.getElementById('selectedCount');
        // Tambahkan tombol X untuk reset checklist
        const clearSelectionButton = document.createElement('button');

        clearSelectionButton.textContent = '❌';
        clearSelectionButton.style.marginLeft = '10px';
        clearSelectionButton.style.display = 'none'; // Sembunyikan saat awal
        clearSelectionButton.addEventListener('click', function () {
            document.querySelectorAll('.file-checkbox:checked').forEach(checkbox => {
                checkbox.checked = false;
            });
            updateToolbar();
        });
        toolbar.appendChild(clearSelectionButton);

        function updateToolbar() {
            const selectedCount = document.querySelectorAll('.file-checkbox:checked').length;

            // Update teks jumlah yang dipilih
            selectedCountElement.textContent = `${selectedCount} selected`;

            // Tampilkan toolbar jika ada yang dipilih, sembunyikan jika tidak ada
            toolbar.style.display = selectedCount > 0 ? 'flex' : 'none';

            // Tampilkan tombol X jika lebih dari 1 yang dipilih
            clearSelectionButton.style.display = selectedCount > 1 ? 'inline-block' : 'none';
        }

        fileContainer.addEventListener('change', handleCheckboxChange);

        fileContainer.addEventListener('change', function (event) {
            if (event.target.classList.contains('file-checkbox')) {
                updateToolbar();
            }
        });

        window.addEventListener('load', () => {
            const checkedCount = Array.from(checkboxes).filter(checkbox => checkbox.checked).length;
            if (checkedCount > 0) {
                toolbar.style.display = 'flex';
            } else {
                toolbar.style.display = 'none';
            }
        });

        function handleCheckboxChange(event) {
            const checkedCount = document.querySelectorAll('.file-checkbox:checked').length;
            if (checkedCount > 0) {
                toolbar.style.display = 'flex'; // Tampilkan toolbar saat ada yang dipilih
            } else {
                toolbar.style.display = 'none'; // Sembunyikan saat tidak ada yang dipilih
            }
        }

        function getFileIcon(filename) {
            const ext = filename.split('.').pop().toLowerCase();
            const icons = {
                'xlsx': 'fa-file-excel',
                'docx': 'fa-file-word',
                'pptx': 'fa-file-powerpoint',
                'zip': 'fa-file-archive',
                'pdf': 'fa-file-pdf',
                'jpg': 'fa-file-image',
                'jpeg': 'fa-file-image',
                'png': 'fa-file-image'
            };
            return `<i class="fas ${icons[ext] || 'fa-file-alt'} tile-icon"></i>`;
        }

        document.querySelectorAll(".sort-option").forEach(item => {
            item.addEventListener("click", function () {
                const sortBy = this.getAttribute("data-sort");
                if (sortBy === "name") fileData.sort((a, b) => a.name.localeCompare(b.name));
                else if (sortBy === "date") fileData.sort((a, b) => new Date(a.date) - new Date(b.date));
                else if (sortBy === "size") fileData.sort((a, b) => parseFloat(a.size) - parseFloat(b.size));
                renderListView();
                toolbar.style.display = 'none';
            });
        });

        document.querySelectorAll(".view-option").forEach(item => {
            item.addEventListener("click", function () {
                const viewType = this.getAttribute("data-view");
                if (viewType === "list") renderListView();
                else renderTilesView();

                toolbar.style.display = 'none';
            });
        });

        renderListView();
    });

</script>
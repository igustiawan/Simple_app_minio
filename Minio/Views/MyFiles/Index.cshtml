@using Minio.Services
@{
    ViewData["Title"] = "MyFiles";
    ViewData["Menu"] = "MyFiles";
}

<!-- Include Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<div class="wrapper">
    <div class="content-wrapper">
        <div class="container-fluid p-4">
            <h2>File Manager</h2>
            <!-- Sorting & View Options -->


            <div class="d-flex justify-content-end mb-3">

                <!-- Sorting Dropdown -->
                <div class="dropdown me-2">
                    <button class="btn btn-light dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        Sort
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="sortDropdown">
                        <li><a class="dropdown-item sort-option" data-sort="name">Name</a></li>
                        <li><a class="dropdown-item sort-option" data-sort="date">Modified Date</a></li>
                        <li><a class="dropdown-item sort-option" data-sort="size">File Size</a></li>
                    </ul>
                </div>
                <!-- View Options Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-light dropdown-toggle" type="button" id="viewDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        View
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="viewDropdown">
                        <li><a class="dropdown-item view-option" data-view="list">List</a></li>
                        <li><a class="dropdown-item view-option" data-view="tiles">Tiles</a></li>
                    </ul>
                </div>
            </div>



            <button id="uploadBtn" class="btn btn-primary">Upload</button>
            <!-- Modal Upload -->
            <div id="uploadModal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <h2>Upload File</h2>
                    <div class="drop-zone">Drag and drop file here or <a href="#">browse</a></div>
                    <h3>Uploaded Files</h3>
                    <ul id="fileList">
                        <!-- Daftar file akan muncul di sini -->
                    </ul>
                    <button id="cancelUpload">Cancel</button>
                    <button id="addFiles" class="btn-primary">Add Files</button>
                </div>
            </div>

            <div id="toolbar" class="toolbar" style="display: none;">
                <button id="deleteBtn">
                    <i class="fas fa-trash-alt"></i>
                    Delete
                </button>
                <button id="favoriteBtn">
                    <i class="fas fa-star"></i>
                    Favorite
                </button>
                <button id="downloadBtn">
                    <i class="fas fa-download"></i>
                    Download
                </button>
                <button id="moveToBtn">
                    <i class="fas fa-folder"></i>
                    Move to
                </button>
                <button id="copyToBtn">
                    <i class="fas fa-copy"></i>
                    Copy to
                </button>
                <select id="sortSelect">
                    <!-- Pilihan sort -->
                </select>
                <select id="viewSelect">
                    <!-- Pilihan view -->
                </select>
                <span id="selectedCount">0 selected</span>
            </div>

            </br>

            <!-- File Container -->
            <div id="fileContainer" class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Modified Date</th>
                            <th>Size</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>                       
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<style>
    .modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    .modal-content {
        position: relative;
    }

    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
        font-size: 20px;
    }

    .drop-zone {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        margin-bottom: 20px;
    }
</style>
<style>
    /* Styling for actions button */
    .btn-link {
        color: #007bff;
        text-decoration: none;
    }

    /* Styling for dropdown menu */
    .dropdown-menu {
        min-width: 10rem;
        z-index: 1000; /* Ensure dropdown appears above other elements */
    }

    /* Hover effect for dropdown items */
    .dropdown-item:hover {
        background-color: #f8f9fa;
        color: #007bff;
    }

    /* Base styling for tiles */
    .tiles-view {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 36px;
        overflow: hidden; /* Hilangkan scroll */
    }

    .tile-item {
        position: relative;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 36px;
        text-align: center;
        background-color: #f9f9f9;
        transition: transform 0.2s ease-in-out;
        overflow: hidden; /* Hilangkan scroll */
        height: 100%; /* Pastikan tinggi tetap sesuai */
    }

    .tile-icon {
        font-size: 48px;
        margin-bottom: 8px;
        color: #007bff;
        transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;
    }

    .tile-name {
        font-size: 14px;
        font-weight: bold;
        margin-bottom: 4px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .tile-info {
        font-size: 12px;
        color: #666;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Hover effect */
    .tile-item:hover {
        transform: scale(1);
    }

        .tile-item:hover .tile-icon {
            transform: scale(1.2); /* Perbesar ikon saat hover */
            color: #ff6f61; /* Ubah warna ikon saat hover */
        }


    input[type="checkbox"] {
        position: absolute;
        opacity: 0;
    }

    label {
        position: relative;
        padding-left: 25px; /* Adjust based on checkbox size */
        cursor: pointer;
    }

        label::before {
            content: '';
            position: absolute;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 25px;
            height: 25px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

    input[type="checkbox"]:checked + label::before {
        background-color: #007bff;
        border-color: #007bff;
    }

    input[type="checkbox"]:checked + label::after {
        content: '';
        position: absolute;
        left: 6px;
        top: 50%;
        transform: translateY(-50%);
        width: 5px;
        height: 10px;
        border-style: solid;
        border-color: white;
        border-image: initial;
        border-width: 0 2px 2px 0;
        transform-origin: center center;
        rotate: 45deg;
    }

    .toolbar {
          display: flex;
          background-color: #ffffff;
          border-radius: 5px;
          box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
          padding: 5px 10px;
        }

        .toolbar button,
        .toolbar select,
        .toolbar span {
          display: flex;
          align-items: center;
          border: none;
          background: none;
          color: #666666;
          padding: 5px 10px;
          cursor: pointer;
          transition: color 0.3s ease;
        }

        .toolbar button:hover {
          color: #333333;
        }

        .toolbar button i {
          margin-right: 5px;
        }

        .toolbar select {
          appearance: none;
          -webkit-appearance: none;
          background: url('dropdown-icon.svg') right center / contain no-repeat;
          padding: 5px 20px 5px 10px;
        }


</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let fileData = [
            { name: "Buku.xlsx", date: "2024-01-01", size: "9.02 KB" },
            { name: "Presentation.pptx", date: "2025-01-01", size: "12.8 KB" },
            { name: "Project.zip", date: "2025-01-01", size: "45.5 MB" },
            { name: "Project1.docx", date: "2025-01-11", size: "45.5 MB" },
            { name: "Project2.zip", date: "2025-01-07", size: "41.5 MB" },
            { name: "Project3.zip", date: "2025-01-04", size: "46.5 MB" },
            { name: "Project4.zip", date: "2024-02-01", size: "43.5 MB" }
        ];

        function renderListView() {
            let container = document.getElementById("fileContainer");
            container.innerHTML = `
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Modified Date</th>
                            <th>Size</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${fileData.map(file => `
                            <tr>
                                <td>${file.name}</td>
                                <td>${file.date}</td>
                                <td>${file.size}</td>
                                <td>
                                    <button class="btn btn-link dropdown-toggle action-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item action-detail" href="#">Details</a></li>
                                        <li><a class="dropdown-item action-share" href="#">Share</a></li>
                                        <li><a class="dropdown-item action-copy" href="#">Copy</a></li>
                                        <li><a class="dropdown-item action-move" href="#">Move</a></li>
                                        <li><a class="dropdown-item action-download" href="#">Download</a></li>
                                        <li><a class="dropdown-item action-rename" href="#">Rename</a></li>
                                        <li><a class="dropdown-item action-delete" href="#">Delete</a></li>
                                    </ul>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
        }

        function renderTilesView() {
            let container = document.getElementById("fileContainer");
            container.innerHTML = `
        <div class="tiles-view">
            ${fileData.map(file => `
                <div class="tile-item">
                    ${getFileIcon(file.name)}
                    <div class="tile-name">${file.name}</div>
                    <div class="tile-info">${file.date} - ${file.size}</div>
                    <input type="checkbox" id="${sanitizeId(file.name)}" class="file-checkbox" name="${file.name}">
                    <label for="${sanitizeId(file.name)}"></label>
                </div>
            `).join('')}
        </div>
        `;

            document.querySelectorAll('.file-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', handleCheckboxChange);
            });
        }

   

        document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.classList.add('file-checkbox'); // Tambahkan class
        });

        document.getElementById('deleteBtn').addEventListener('click', () => {
            const selectedFiles = [];
            document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
                const fileId = checkbox.id;
                selectedFiles.push(fileId);
                // Lakukan tindakan delete pada fileId
            });
            // Lakukan tindakan delete pada array selectedFiles
        });

        function sanitizeId(id) {
            return id.replace(/[^a-zA-Z0-9]/g, '_');
        }

        const toolbar = document.getElementById('toolbar');
        const checkboxes = document.querySelectorAll('.file-checkbox');
        const fileContainer = document.getElementById('fileContainer');
        const selectedCountElement = document.getElementById('selectedCount');
        // Tambahkan tombol X untuk reset checklist
        const clearSelectionButton = document.createElement('button');

        clearSelectionButton.textContent = '❌';
        clearSelectionButton.style.marginLeft = '10px';
        clearSelectionButton.style.display = 'none'; // Sembunyikan saat awal
        clearSelectionButton.addEventListener('click', function () {
            document.querySelectorAll('.file-checkbox:checked').forEach(checkbox => {
                checkbox.checked = false;
            });
            updateToolbar();
        });
        toolbar.appendChild(clearSelectionButton);

        function updateToolbar() {
            const selectedCount = document.querySelectorAll('.file-checkbox:checked').length;

            // Update teks jumlah yang dipilih
            selectedCountElement.textContent = `${selectedCount} selected`;

            // Tampilkan toolbar jika ada yang dipilih, sembunyikan jika tidak ada
            toolbar.style.display = selectedCount > 0 ? 'flex' : 'none';

            // Tampilkan tombol X jika lebih dari 1 yang dipilih
            clearSelectionButton.style.display = selectedCount > 1 ? 'inline-block' : 'none';
        }

        fileContainer.addEventListener('change', handleCheckboxChange);

        fileContainer.addEventListener('change', function (event) {
            if (event.target.classList.contains('file-checkbox')) {
                updateToolbar();
            }
        });

        window.addEventListener('load', () => {
            const checkedCount = Array.from(checkboxes).filter(checkbox => checkbox.checked).length;
            if (checkedCount > 0) {
                toolbar.style.display = 'flex';
            } else {
                toolbar.style.display = 'none';
            }
        });

        function handleCheckboxChange(event) {
            const checkedCount = document.querySelectorAll('.file-checkbox:checked').length;
            if (checkedCount > 0) {
                toolbar.style.display = 'flex'; // Tampilkan toolbar saat ada yang dipilih
            } else {
                toolbar.style.display = 'none'; // Sembunyikan saat tidak ada yang dipilih
            }
        }

        function getFileIcon(filename) {
            const ext = filename.split('.').pop().toLowerCase();
            const icons = {
                'xlsx': 'fa-file-excel',
                'docx': 'fa-file-word',
                'pptx': 'fa-file-powerpoint',
                'zip': 'fa-file-archive',
                'pdf': 'fa-file-pdf',
                'jpg': 'fa-file-image',
                'jpeg': 'fa-file-image',
                'png': 'fa-file-image'
            };
            return `<i class="fas ${icons[ext] || 'fa-file-alt'} tile-icon"></i>`;
        }

        document.querySelectorAll(".sort-option").forEach(item => {
            item.addEventListener("click", function () {
                const sortBy = this.getAttribute("data-sort");
                if (sortBy === "name") fileData.sort((a, b) => a.name.localeCompare(b.name));
                else if (sortBy === "date") fileData.sort((a, b) => new Date(a.date) - new Date(b.date));
                else if (sortBy === "size") fileData.sort((a, b) => parseFloat(a.size) - parseFloat(b.size));
                renderListView();
                toolbar.style.display = 'none';
            });
        });

        document.querySelectorAll(".view-option").forEach(item => {
            item.addEventListener("click", function () {
                const viewType = this.getAttribute("data-view");
                if (viewType === "list") renderListView();
                else renderTilesView();

                toolbar.style.display = 'none';
            });
        });

        renderListView();
    });

</script>